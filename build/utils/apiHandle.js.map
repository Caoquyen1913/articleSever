{"version":3,"sources":["../../src/utils/apiHandle.js"],"names":["callAPI","url","method","data","options","METHOD","POST","console","log","axios","post","then","response","result","status","catch","error","PUT","put","DELETE","delete","get"],"mappings":"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","sourcesContent":["import axios from '../config/axios.config';\nimport { METHOD } from '../service/articlesApi/articlesApi.const';\n// import responseHandle from './responseHandle';\n// const callAPI = async ({ url, method, data, options }) => {\n//   try {\n//     let result = {};\n//     switch (method) {\n//       case METHOD.POST:\n//         console.log('here');\n//         result = await axios.post(url, data, options);\n//         // result = JSON.parse(result);\n//         console.log('result', result);\n//         // console.log(JSON.parse(JSON.stringify(response.data)));\n//         // result = JSON.parse(JSON.stringify(response));\n//         break;\n//       case METHOD.PUT:\n//         result = await axios.put(url, data, options);\n//         break;\n//       case METHOD.DELETE:\n//         result = await axios.delete(url, options);\n//         break;\n//       default:\n//         console.log('go here');\n//         result = await axios.get(url, options);\n//         break;\n//     }\n//     // console.log('result', result.status);\n//     if (result.response)\n//       return responseHandle.send(result.status, {\n//         errors: [\n//           {\n//             error: result.error,\n//           },\n//         ],\n//       });\n//     return result.data;\n//   } catch (error) {\n//     return responseHandle.send(result.status, {\n//       errors: [\n//         {\n//           error: error.status,\n//         },\n//       ],\n//     });\n//   }\n// };\n\nconst callAPI = ({\n  url,\n  method,\n  data,\n  options,\n}) => {\n  // let result;\n  switch (method) {\n    case METHOD.POST:\n      console.log('here');\n      return axios\n        .post(url, data, options)\n        .then((response) => {\n          return { result: response.data, status: response.status };\n        })\n        .catch((error) => {\n          if (error.response) {\n            console.log(error.response.data.error);\n            return {\n              result: error.response.data.error,\n              status: error.response.data.status,\n            };\n          }\n        });\n    // result = JSON.parse(result);\n    // console.log('result', result);\n    // console.log(JSON.parse(JSON.stringify(response.data)));\n    // result = JSON.parse(JSON.stringify(response));\n    // break;\n    case METHOD.PUT:\n      return axios\n        .put(url, data, options)\n        .then((response) => {\n          return { result: response.data, status: response.status };\n        })\n        .catch((error) => {\n          if (error.response) {\n            return {\n              result: error.response.data.error,\n              status: error.response.data.status,\n            };\n          }\n        });\n    // break;\n    case METHOD.DELETE:\n      return axios\n        .delete(url, options)\n        .then((response) => {\n          return { result: response.data, status: response.status };\n        })\n        .catch((error) => {\n          if (error.response) {\n            return {\n              result: error.response.data.error,\n              status: error.response.data.status,\n            };\n          }\n        });\n    // break;\n    default:\n      return axios\n        .get(url, options)\n        .then((response) => {\n          return { result: response.data, status: response.status };\n        })\n        .catch((error) => {\n          if (error.response) {\n            return {\n              result: error.response.data.error,\n              status: error.response.data.status,\n            };\n          }\n        });\n    // break;\n  }\n  // console.log('result', result.status);\n  // if (result.response)\n  //   return responseHandle.send(result.status, {\n  //     errors: [\n  //       {\n  //         error: result.error,\n  //       },\n  //     ],\n  //   });\n  // return result.data;\n};\n\nexport default { callAPI };\n"],"file":"apiHandle.js"}