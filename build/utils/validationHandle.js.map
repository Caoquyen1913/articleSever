{"version":3,"sources":["../../src/utils/validationHandle.js"],"names":["validate","schema","reqType","valid","req","res","next","result","body","value","params","query","error","json","responseHandle","send","HttpStatusCode","INTERNAL_SERVER","errors","message","validator","Validator","input","fails","BAD_REQUEST"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,QAAQ,GAAG,CAACC,MAAD,EAASC,OAAT,KAAqB;AACpC,SAAO,SAASC,KAAT,CAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+B;AACpC,QAAI;AACF,UAAIC,MAAM,GAAG,EAAb;;AACA,cAAQL,OAAR;AACE,aAAK,MAAL;AACEK,UAAAA,MAAM,GAAGN,MAAM,CAACD,QAAP,CAAgBI,GAAG,CAACI,IAApB,CAAT;AACAJ,UAAAA,GAAG,CAACI,IAAJ,GAAWD,MAAM,CAACE,KAAlB;AACA;;AACF,aAAK,QAAL;AACEF,UAAAA,MAAM,GAAGN,MAAM,CAACD,QAAP,CAAgBI,GAAG,CAACM,MAApB,CAAT;AACA;;AACF;AACEH,UAAAA,MAAM,GAAGN,MAAM,CAACD,QAAP,CAAgBI,GAAG,CAACO,KAApB,CAAT;AACAP,UAAAA,GAAG,CAACO,KAAJ,GAAYJ,MAAM,CAACE,KAAnB;AACA;AAXJ;;AAaA,UAAIF,MAAM,CAACK,KAAX,EAAkB;AAChB;AACA;AACA;AACA,eAAOP,GAAG,CAACQ,IAAJ,CAAS;AACdD,UAAAA,KAAK,EAAEL,MAAM,CAACK;AADA,SAAT,CAAP;AAGD;;AAED,aAAON,IAAI,EAAX;AACD,KAzBD,CAyBE,OAAOM,KAAP,EAAc;AACd,aAAOE,wBAAeC,IAAf,CAAoBV,GAApB,EAAyBW,yBAAeC,eAAxC,EAAyD;AAC9DC,QAAAA,MAAM,EAAE,CACN;AACEN,UAAAA,KAAK,EAAEA,KAAK,CAACO;AADf,SADM;AADsD,OAAzD,CAAP;AAOD;AACF,GAnCD;AAoCD,CArCD;;AAsCA,MAAMC,SAAS,GAAG,CAACnB,MAAD,EAASC,OAAT,KAAqB;AACrC,SAAO,SAASC,KAAT,CAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+B;AACpC,QAAI;AACF,UAAIC,MAAM,GAAG,EAAb;;AACA,cAAQL,OAAR;AACE,aAAK,MAAL;AACEK,UAAAA,MAAM,GAAG,IAAIc,oBAAJ,CAAcjB,GAAG,CAACI,IAAlB,EAAwBP,MAAxB,CAAT;AACAG,UAAAA,GAAG,CAACI,IAAJ,GAAWD,MAAM,CAACe,KAAlB;AACA;;AACF,aAAK,QAAL;AACEf,UAAAA,MAAM,GAAG,IAAIc,oBAAJ,CAAcjB,GAAG,CAACM,MAAlB,EAA0BT,MAA1B,CAAT;AACA;;AACF;AACEM,UAAAA,MAAM,GAAG,IAAIc,oBAAJ,CAAcjB,GAAG,CAACO,KAAlB,EAAyBV,MAAzB,CAAT;AACAG,UAAAA,GAAG,CAACO,KAAJ,GAAYJ,MAAM,CAACe,KAAnB;AACA;AAXJ;;AAaA,UAAIf,MAAM,CAACgB,KAAP,EAAJ,EAAoB;AAClB;AACA;AACA;AACA,eAAOT,wBAAeC,IAAf,CAAoBV,GAApB,EAAyBW,yBAAeQ,WAAxC,EAAqD;AAC1DN,UAAAA,MAAM,EAAE,CACN;AACEN,YAAAA,KAAK,EAAEL,MAAM,CAACW;AADhB,WADM;AADkD,SAArD,CAAP;AAOD;;AACD,aAAOZ,IAAI,EAAX;AACD,KA5BD,CA4BE,OAAOM,KAAP,EAAc;AACd,aAAOE,wBAAeC,IAAf,CAAoBV,GAApB,EAAyBW,yBAAeC,eAAxC,EAAyD;AAC9DC,QAAAA,MAAM,EAAE,CACN;AACEN,UAAAA,KAAK,EAAEA,KAAK,CAACO;AADf,SADM;AADsD,OAAzD,CAAP;AAOD;AACF,GAtCD;AAuCD,CAxCD;;eAyCe;AACbnB,EAAAA,QADa;AACHoB,EAAAA;AADG,C","sourcesContent":["import Validator from 'validatorjs';\nimport { HttpStatusCode } from '../const/httpCode';\nimport responseHandle from './responseHandle';\n\nconst validate = (schema, reqType) => {\n  return function valid(req, res, next) {\n    try {\n      let result = {};\n      switch (reqType) {\n        case 'body':\n          result = schema.validate(req.body);\n          req.body = result.value;\n          break;\n        case 'params':\n          result = schema.validate(req.params);\n          break;\n        default:\n          result = schema.validate(req.query);\n          req.query = result.value;\n          break;\n      }\n      if (result.error) {\n        // const err = new Error(result.error);\n        // err.statusCode = 400;\n        // return next(err);\n        return res.json({\n          error: result.error,\n        });\n      }\n\n      return next();\n    } catch (error) {\n      return responseHandle.send(res, HttpStatusCode.INTERNAL_SERVER, {\n        errors: [\n          {\n            error: error.message,\n          },\n        ],\n      });\n    }\n  };\n};\nconst validator = (schema, reqType) => {\n  return function valid(req, res, next) {\n    try {\n      let result = {};\n      switch (reqType) {\n        case 'body':\n          result = new Validator(req.body, schema);\n          req.body = result.input;\n          break;\n        case 'params':\n          result = new Validator(req.params, schema);\n          break;\n        default:\n          result = new Validator(req.query, schema);\n          req.query = result.input;\n          break;\n      }\n      if (result.fails()) {\n        // const err = new Error(result.error);\n        // err.statusCode = 400;\n        // return next(err);\n        return responseHandle.send(res, HttpStatusCode.BAD_REQUEST, {\n          errors: [\n            {\n              error: result.errors,\n            },\n          ],\n        });\n      }\n      return next();\n    } catch (error) {\n      return responseHandle.send(res, HttpStatusCode.INTERNAL_SERVER, {\n        errors: [\n          {\n            error: error.message,\n          },\n        ],\n      });\n    }\n  };\n};\nexport default {\n  validate, validator,\n};"],"file":"validationHandle.js"}