{"version":3,"sources":["../../../src/api/user/user.controller.js"],"names":["saltRounds","signIn","req","res","name","username","password","body","hashPassword","bcrypt","hash","user","userModel","create","isActive","undefined","responseHandle","send","HttpStatusCode","OK","message","data","error","INTERNAL_SERVER","errors","getUser","wildcard","query","$or","$regex","RegExp","toString","toLowerCase","toUpperCase","listUser","find","sort","select"],"mappings":"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","sourcesContent":["import bcrypt from 'bcrypt';\nimport userModel from './user.model';\nimport responseHandle from '../../utils/responseHandle';\nimport { HttpStatusCode } from '../../const/httpCode';\n\nconst saltRounds = 10;\nconst signIn = async (req, res) => {\n  try {\n    const { name, username, password } = req.body;\n    const hashPassword = await bcrypt.hash(password, saltRounds);\n    const user = await userModel.create({\n      name,\n      username,\n      password: hashPassword,\n      isActive: true,\n    });\n    user.password = undefined;\n    user.isActive = undefined;\n    return responseHandle.send(res, HttpStatusCode.OK, {\n      message: 'sign in success',\n      data: user,\n    });\n  } catch (error) {\n    return responseHandle.send(res, HttpStatusCode.INTERNAL_SERVER, {\n      errors: [\n        {\n          error: error.message,\n        },\n      ],\n    });\n  }\n};\n\nconst getUser = async (req, res) => {\n  try {\n    const { name, username, wildcard } = req.query;\n    let query = {};\n    if (wildcard) {\n      query = {\n        ...query,\n        $or: [\n          {\n            name: {\n              $regex: new RegExp(\n                `(${wildcard.toString().toLowerCase()})\\\\w+`,\n                'i',\n              ),\n            },\n          },\n          {\n            name: {\n              $regex: new RegExp(\n                `( ${wildcard.toString().toUpperCase()} )\\\\w+`,\n                'i',\n              ),\n            },\n          },\n        ],\n      };\n    }\n    if (name) {\n      query = {\n        ...query,\n        name: { $regex: new RegExp(`(${name})\\\\w+`, 'i') },\n      };\n    }\n\n    if (username) {\n      query = {\n        ...query,\n        username: { $regex: new RegExp(`( ${username})\\\\w+`, 'i') },\n      };\n    }\n\n    const listUser = await userModel\n      .find(query)\n      .sort({ name: 1 })\n      .select('-password -isActive');\n    return responseHandle.send(res, HttpStatusCode.OK, {\n      message: 'get user success',\n      data: listUser,\n    });\n  } catch (error) {\n    return responseHandle.send(res, HttpStatusCode.INTERNAL_SERVER, {\n      errors: [\n        {\n          error: error.message,\n        },\n      ],\n    });\n  }\n};\n\nexport default {\n  signIn,\n  getUser,\n};\n"],"file":"user.controller.js"}