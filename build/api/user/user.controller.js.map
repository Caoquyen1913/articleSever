{"version":3,"sources":["../../../src/api/user/user.controller.js"],"names":["saltRounds","signIn","req","res","name","username","password","body","user","userModel","create","isActive","undefined","responseHandle","send","HttpStatusCode","OK","message","data","error","INTERNAL_SERVER","errors","getUser","wildcard","query","$or","$regex","RegExp","toString","toLowerCase","toUpperCase","listUser","find","sort","select"],"mappings":"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","sourcesContent":["// import bcrypt from 'bcrypt';\nimport userModel from './user.model';\nimport responseHandle from '../../utils/responseHandle';\nimport { HttpStatusCode } from '../../const/httpCode';\n\nconst saltRounds = 10;\nconst signIn = async(req, res) => {\n    try {\n        const { name, username, password } = req.body;\n        // const hashPassword = await bcrypt.hash(password, saltRounds);\n        const user = await userModel.create({\n            name,\n            username,\n            password: password,\n            isActive: true,\n        });\n        user.password = undefined;\n        user.isActive = undefined;\n        return responseHandle.send(res, HttpStatusCode.OK, {\n            message: 'sign in success',\n            data: user,\n        });\n    } catch (error) {\n        return responseHandle.send(res, HttpStatusCode.INTERNAL_SERVER, {\n            errors: [{\n                error: error.message,\n            }, ],\n        });\n    }\n};\n\nconst getUser = async(req, res) => {\n    try {\n        const { name, username, wildcard } = req.query;\n        let query = {};\n        if (wildcard) {\n            query = {\n                ...query,\n                $or: [{\n                        name: {\n                            $regex: new RegExp(\n                                `(${wildcard.toString().toLowerCase()})\\\\w+`,\n                                'i',\n                            ),\n                        },\n                    },\n                    {\n                        name: {\n                            $regex: new RegExp(\n                                `( ${wildcard.toString().toUpperCase()} )\\\\w+`,\n                                'i',\n                            ),\n                        },\n                    },\n                ],\n            };\n        }\n        if (name) {\n            query = {\n                ...query,\n                name: { $regex: new RegExp(`(${name})\\\\w+`, 'i') },\n            };\n        }\n\n        if (username) {\n            query = {\n                ...query,\n                username: { $regex: new RegExp(`( ${username})\\\\w+`, 'i') },\n            };\n        }\n\n        const listUser = await userModel\n            .find(query)\n            .sort({ name: 1 })\n            .select('-password -isActive');\n        return responseHandle.send(res, HttpStatusCode.OK, {\n            message: 'get user success',\n            data: listUser,\n        });\n    } catch (error) {\n        return responseHandle.send(res, HttpStatusCode.INTERNAL_SERVER, {\n            errors: [{\n                error: error.message,\n            }, ],\n        });\n    }\n};\n\nexport default {\n    signIn,\n    getUser,\n};"],"file":"user.controller.js"}