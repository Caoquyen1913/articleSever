{"version":3,"sources":["../src/index.js"],"names":["dotenv","config","app","use","bodyParser","json","urlencoded","extended","limiter","express","static","path","join","__dirname","PORT","process","env","get","req","res","sendFile","apiRouter","docRouter","host","listen","mongooseConfig","mongoConnect","console","log"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAPA;AASAA,gBAAOC,MAAP,G,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,GAAG,GAAG,uBAAZ;AAEAA,GAAG,CAACC,GAAJ,CAAQ,oBAAR;AACAD,GAAG,CAACC,GAAJ,CAAQC,oBAAWC,IAAX,EAAR;AACAH,GAAG,CAACC,GAAJ,CAAQC,oBAAWE,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR;AACAL,GAAG,CAACC,GAAJ,CAAQK,kBAAR;AACAN,GAAG,CAACC,GAAJ,CAAQ,qBAAO,UAAP,CAAR;AACAD,GAAG,CAACC,GAAJ,CAAQM,iBAAQC,MAAR,CAAeC,cAAKC,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,QAA3B,CAAf,CAAR,E,CACA;AACA;;AACA,MAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;AAEAZ,GAAG,CAACe,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACvB,SAAOA,GAAG,CAACC,QAAJ,CAAaT,cAAKC,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,QAA3B,EAAqC,YAArC,CAAb,CAAP;AACH,CAFD;AAIAX,GAAG,CAACC,GAAJ,CAAQ,SAAR,EAAmBkB,eAAnB;AACAnB,GAAG,CAACC,GAAJ,CAAQ,OAAR,EAAiBmB,eAAjB,E,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,IAAI,GAAG,SAAb;AACArB,GAAG,CAACsB,MAAJ,CAAWV,IAAX,EAAiBS,IAAjB,EAAuB,YAAW;AAC9B,QAAME,kBAAeC,YAAf,EAAN;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBd,IAAzB;AACH,CAHD,E,CAIA","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport morgan from 'morgan';\nimport dotenv from 'dotenv';\nimport cors from 'cors';\nimport path from 'path';\n// import favicon from 'serve-favicon';\nimport mongooseConfig from './config/mongoose.config';\nimport './cronJobs';\nimport responseHandle from './utils/responseHandle';\nimport apiRouter from './api/router';\nimport docRouter from './docs/docApi.router';\nimport { HttpStatusCode } from './const/httpCode';\nimport { limiter } from './config/rateLimit.config';\n\ndotenv.config();\n// let compiler = webpack(configuration);\n// new webpack.ProgressPlugin().apply(compiler);\n// compiler.run(function (err, stats) {\n// const compiler = webpack(configuration);\n// const app = new WebpackDevServer(compiler, {\n//   stats: {\n//     colors: true,\n//   },\n// });\nconst app = express();\n\napp.use(cors());\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(limiter);\napp.use(morgan('combined'));\napp.use(express.static(path.join(__dirname, \"..\", \"public\")));\n// app.use(favicon(path.join(__dirname, '..', 'public', 'favicon.ico')));\n// app.use(express.static(path.join(__dirname, \"..\", \"public\", 'favicon.ico')));\nconst PORT = process.env.PORT || 5000;\n\napp.get('/', (req, res) => {\n    return res.sendFile(path.join(__dirname, \"..\", \"public\", \"index.html\"))\n});\n\napp.use('/api/v1', apiRouter);\napp.use('/docs', docRouter);\n\n// app.all('*', async(req, res) => {\n//     // try {\n//     //   return responseHandle.send(res, HttpStatusCode.OK, {\n//     //     message: 'ok',\n//     //     data: data.data,\n//     //   });\n//     // } catch (error) {\n//     return responseHandle.send(res, HttpStatusCode.NOT_FOUND, {\n//         errors: [{\n//             error: 'the router can not be found',\n//             // error: error.message,\n//         }, ],\n//     });\n//     // }\n// });\nconst host = \"0.0.0.0\"\napp.listen(PORT, host, async() => {\n    await mongooseConfig.mongoConnect();\n    console.log('run port:', PORT);\n});\n// });"],"file":"index.js"}