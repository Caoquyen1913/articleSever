{"version":3,"sources":["../src/app.js"],"names":["dotenv","config","app","redisClient","redis","createClient","use","bodyParser","json","urlencoded","extended","PORT","process","env","get","req","res","message","apiRouter","all","next","err","Error","statusCode","listen","mongooseConfig","mongoConnect","on","console","log"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AACAA,gBAAOC,MAAP;;AACA,MAAMC,GAAG,GAAG,uBAAZ;;AACA,MAAMC,WAAW,GAAGC,eAAMC,YAAN,CAAmB,IAAnB,CAApB;;AACAH,GAAG,CAACI,GAAJ,CAAQ,oBAAR;AACAJ,GAAG,CAACI,GAAJ,CAAQC,oBAAWC,IAAX,EAAR;AACAN,GAAG,CAACI,GAAJ,CAAQC,oBAAWE,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR;AACA,MAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;AAEAT,GAAG,CAACY,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzBA,EAAAA,GAAG,CAACR,IAAJ,CAAS;AACPS,IAAAA,OAAO,EAAE;AADF,GAAT;AAGD,CAJD;AAMAf,GAAG,CAACI,GAAJ,CAAQ,SAAR,EAAmBY,eAAnB;AAEAhB,GAAG,CAACiB,GAAJ,CAAQ,GAAR,EAAa,CAACJ,GAAD,EAAMC,GAAN,EAAWI,IAAX,KAAoB;AAC/B,QAAMC,GAAG,GAAG,IAAIC,KAAJ,CAAU,6BAAV,CAAZ;AACAD,EAAAA,GAAG,CAACE,UAAJ,GAAiB,GAAjB;AACA,SAAOH,IAAI,CAACC,GAAD,CAAX;AACD,CAJD;AAMAnB,GAAG,CAACsB,MAAJ,CAAWb,IAAX,EAAiB,YAAY;AAC3B,QAAMc,kBAAeC,YAAf,EAAN;AACA,QAAMvB,WAAW,CAACwB,EAAZ,CAAe,SAAf,EAAyB,MAAI;AACjCC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD,GAFK,CAAN;AAGAD,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD,CAND","sourcesContent":["import express from 'express';\nimport mongooseConfig from './config/mongoose.config';\nimport dotenv from 'dotenv';\nimport cors from 'cors';\nimport redis from 'redis';\nimport \"./cronJobs\"\nimport bodyParser from 'body-parser';\nimport apiRouter from './api/router';\ndotenv.config();\nconst app = express();\nconst redisClient = redis.createClient(6379);\napp.use(cors());\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\nconst PORT = process.env.PORT || 5000;\n\napp.get('/', (req, res) => {\n  res.json({\n    message: 'wellcome',\n  });\n});\n\napp.use('/api/v1', apiRouter);\n\napp.all('*', (req, res, next) => {\n  const err = new Error('the router can not be found');\n  err.statusCode = 404;\n  return next(err);\n});\n\napp.listen(PORT, async () => {\n  await mongooseConfig.mongoConnect();\n  await redisClient.on(\"connect\",()=>{\n    console.log(\"connect redis\")\n  })\n  console.log('run port 5000');\n});\n"],"file":"app.js"}